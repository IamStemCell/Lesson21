#Task 1 
#File Context Manager class
#Create your own class, which can behave like a built-in function `open`.
#Also, you need to extend its functionality with counter and logging.
#Pay special attention to the implementation of `__exit__` method,
#which has to cover all the requirements to context managers.


class FileContManager: 
    def __init__(self, file_name, mode):
        self.file_name = file_name
        self.mode = mode
        self.counter = 0
    
    def __enter__(self):
        self.file = open(self.file_name, self.mode)
        self.counter += 1
        logging.info(f'File {self.file_name} was opened for {self.mode} mode. Current counter is: {self.counter}')
        return self.file
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.file.close()
        self.counter -= 1 
        logging.info(f'File {self.file_name} was closed. Current counter is: {self.counter}')
        if exc_type is not None:
            logging.exception(f'Exception {exc_type} has occurred in custom context manager for file {self.file_name} with value {exc_val}.')    
        return True

#Приклад використання:

with FileContManager("newfile.txt", "w") as file:
    file.write('Hello, Python's custom context manager world!')


#Task2 
#копія коду з попереднього таску (можна було зробити імпорт класу з файлу, так зручніше) 

import unittest
import os
class FileContManager: 
    def __init__(self, file_name, mode):
        self.file_name = file_name
        self.mode = mode
        self.counter = 0
    
    def __enter__(self):
        self.file = open(self.file_name, self.mode)
        self.counter += 1
        logging.info(f'File {self.file_name} was opened for {self.mode} mode. Current counter is: {self.counter}')
        return self.file
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.file.close()
        self.counter -= 1 
        logging.info(f'File {self.file_name} was closed. Current counter is: {self.counter}')
        if exc_type is not None:
            logging.exception(f'Exception {exc_type} has occurred in custom context manager for file {self.file_name} with value {exc_val}.')    
        return True

#самі тести

class TestFileContManager(unittest.TestCase):

    def test_file_read(self):
        # Test reading from file
        with FileContManager('newfile.txt', 'r') as f:
            self.assertEqual(f.read(), 'Hello, Python's custom context manager world!\n')

    def test_file_write(self):
        # Test writing to file
        with FileContManager('newfile.txt', 'w') as f:
            f.write('Hello, Beetroot!\n')
        
        # Verify that the file was written to
        with open('newfile.txt', 'r') as f:
            self.assertEqual(f.read(), 'Hello, Beetroot!\n')

    def test_file_counter(self):
        # Test counter +1 на вхід і -1 на вихід 
        self.assertEqual(FileContManager.counter, 0)
        with FileContManager('newfile.txt', 'r') as f:
            self.assertEqual(FileContManager.counter, 1)
        self.assertEqual(FileContManager.counter, 0)

    def test_file_logging(self):
        # Test logging на вхід і вихід 
        with self.assertLogs() as log:
            with FileContManager('newfile.txt', 'r') as f:
                pass
            self.assertEqual(len(log.records), 2)
            self.assertEqual(log.records[0].getMessage(), 'Entering FileContManager context')
            self.assertEqual(log.records[1].getMessage(), 'Exiting FileContManager context')


    def test_invalid_file_path(self):
        with self.assertRaises(FileNotFoundError):
            with FileContManager('nonexistent_file.txt', 'r'):
                pass

    def test_invalid_file_mode(self):
        with self.assertRaises(ValueError):
            with FileContextManager('test.txt', 'invalid_mode'):
                pass

    def test_runtime_error_in_context(self):
        with self.assertRaises(RuntimeError):
            with FileContManager('testing1.txt', 'w') as file:
                file.write('Some random text')
                raise RuntimeError('Runtime error in context')

    def test_runtime_error_in_exit(self):
        with self.assertRaises(RuntimeError):
            with FileContManager('testing1.txt', 'w') as file:
                file.write('Some random text')
                os.remove('testing1.txt')


if __name__ == '__main__':
    unittest.main()


